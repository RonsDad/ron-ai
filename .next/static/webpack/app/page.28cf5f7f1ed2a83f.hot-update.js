"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/use-computer-agent.ts":
/*!*****************************************!*\
  !*** ./src/hooks/use-computer-agent.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useComputerAgent: () => (/* binding */ useComputerAgent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ useComputerAgent auto */ \nfunction useComputerAgent() {\n    const [agentState, setAgentState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        isActive: false,\n        currentTask: null,\n        liveUrl: null,\n        sessionId: null\n    });\n    const startAgent = async (task, url)=>{\n        try {\n            // Call browser-use backend to create session with LiveURL\n            const response = await fetch('/api/browser-use/session/create-with-url', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    url: url || 'https://duckduckgo.com',\n                    timeout_ms: 600000\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to create browser session: \".concat(response.status));\n            }\n            const data = await response.json();\n            const sessionId = data.result.session_id;\n            const liveUrl = data.result.live_url;\n            setAgentState({\n                isActive: true,\n                currentTask: task,\n                liveUrl: liveUrl,\n                sessionId: sessionId\n            });\n            // Now execute the task on the browser-use agent\n            if (task && task !== \"Computer Use Agent Active\") {\n                console.log(\"Executing browser task: \".concat(task));\n                try {\n                    const taskResponse = await fetch(\"/api/browser-use/session/\".concat(sessionId, \"/task\"), {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            task\n                        })\n                    });\n                    if (!taskResponse.ok) {\n                        console.error(\"Failed to execute task: \".concat(taskResponse.status));\n                    } else {\n                        const taskResult = await taskResponse.json();\n                        console.log('Task execution result:', taskResult);\n                    }\n                } catch (taskError) {\n                    console.error('Error executing browser task:', taskError);\n                }\n            }\n        } catch (error) {\n            console.error('Failed to start browser agent:', error);\n            // Fallback to just showing UI without LiveURL\n            const sessionId = \"cua_\".concat(Date.now());\n            setAgentState({\n                isActive: true,\n                currentTask: task,\n                liveUrl: null,\n                sessionId\n            });\n        }\n    };\n    const stopAgent = async ()=>{\n        if (agentState.sessionId) {\n            try {\n                // Close browser session\n                await fetch(\"/api/browser-use/session/\".concat(agentState.sessionId, \"/close\"), {\n                    method: 'DELETE'\n                });\n            } catch (error) {\n                console.error('Failed to close browser session:', error);\n            }\n        }\n        setAgentState({\n            isActive: false,\n            currentTask: null,\n            liveUrl: null,\n            sessionId: null\n        });\n    };\n    const updateTask = (task)=>{\n        setAgentState((prev)=>({\n                ...prev,\n                currentTask: task\n            }));\n    };\n    const updateUrl = (url)=>{\n        setAgentState((prev)=>({\n                ...prev,\n                liveUrl: url\n            }));\n    };\n    const executeTask = async (task)=>{\n        if (!agentState.sessionId) {\n            throw new Error('No active browser session');\n        }\n        try {\n            const taskResponse = await fetch(\"/api/browser-use/session/\".concat(agentState.sessionId, \"/task\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    task\n                })\n            });\n            if (!taskResponse.ok) {\n                throw new Error(\"Failed to execute task: \".concat(taskResponse.status));\n            }\n            const taskResult = await taskResponse.json();\n            console.log('Task execution result:', taskResult);\n            // Update current task\n            setAgentState((prev)=>({\n                    ...prev,\n                    currentTask: task\n                }));\n            return taskResult;\n        } catch (error) {\n            console.error('Error executing browser task:', error);\n            throw error;\n        }\n    };\n    return {\n        agentState,\n        startAgent,\n        stopAgent,\n        updateTask,\n        updateUrl,\n        executeTask\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/use-computer-agent.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClaudeAPI: () => (/* binding */ ClaudeAPI),\n/* harmony export */   claudeAPI: () => (/* binding */ claudeAPI),\n/* harmony export */   parseSSEStream: () => (/* binding */ parseSSEStream)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// API service for communicating with Claude agent backend\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || '/api';\nclass ClaudeAPI {\n    async chat(request) {\n        const response = await fetch(\"\".concat(this.baseURL, \"/chat\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(request)\n        });\n        if (!response.ok) {\n            throw new Error(\"API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return response.json();\n    }\n    async chatStream(request) {\n        const response = await fetch(\"\".concat(this.baseURL, \"/chat\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                ...request,\n                stream: true\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        if (!response.body) {\n            throw new Error('No response body');\n        }\n        return response.body;\n    }\n    async healthcareAnalyze(task, context) {\n        const response = await fetch(\"\".concat(this.baseURL, \"/healthcare/analyze\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                task,\n                context\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return response.json();\n    }\n    async deepResearch(messages, sessionId, userId) {\n        const response = await fetch(\"\".concat(this.baseURL, \"/api/run_sse\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                sessionId,\n                userId,\n                newMessage: {\n                    parts: messages.map((msg)=>({\n                            text: msg.content\n                        })),\n                    role: messages[messages.length - 1].role\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return response.body;\n    }\n    constructor(baseURL = API_BASE_URL){\n        this.baseURL = baseURL;\n    }\n}\n// Export singleton instance\nconst claudeAPI = new ClaudeAPI();\n// Helper function to parse SSE stream\nasync function* parseSSEStream(stream) {\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n    try {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) break;\n            buffer += decoder.decode(value, {\n                stream: true\n            });\n            const lines = buffer.split('\\n');\n            buffer = lines.pop() || '';\n            for (const line of lines){\n                if (line.startsWith('data: ')) {\n                    const data = line.slice(6).trim();\n                    if (data && data !== '[DONE]') {\n                        try {\n                            yield JSON.parse(data);\n                        } catch (e) {\n                            console.error('Failed to parse SSE data:', e);\n                        }\n                    }\n                }\n            }\n        }\n    } finally{\n        reader.releaseLock();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LDRCQUE0QjtBQUNyQixNQUFNNkIsWUFBWSxJQUFJbEMsWUFBVztBQUV4QyxzQ0FBc0M7QUFDL0IsZ0JBQWdCbUMsZUFBZWxCLE1BQWtDO0lBQ3RFLE1BQU1tQixTQUFTbkIsT0FBT29CLFNBQVM7SUFDL0IsTUFBTUMsVUFBVSxJQUFJQztJQUNwQixJQUFJQyxTQUFTO0lBRWIsSUFBSTtRQUNGLE1BQU8sS0FBTTtZQUNYLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNTixPQUFPTyxJQUFJO1lBQ3pDLElBQUlGLE1BQU07WUFFVkQsVUFBVUYsUUFBUU0sTUFBTSxDQUFDRixPQUFPO2dCQUFFekIsUUFBUTtZQUFLO1lBQy9DLE1BQU00QixRQUFRTCxPQUFPTSxLQUFLLENBQUM7WUFDM0JOLFNBQVNLLE1BQU1FLEdBQUcsTUFBTTtZQUV4QixLQUFLLE1BQU1DLFFBQVFILE1BQU87Z0JBQ3hCLElBQUlHLEtBQUtDLFVBQVUsQ0FBQyxXQUFXO29CQUM3QixNQUFNQyxPQUFPRixLQUFLRyxLQUFLLENBQUMsR0FBR0MsSUFBSTtvQkFDL0IsSUFBSUYsUUFBUUEsU0FBUyxVQUFVO3dCQUM3QixJQUFJOzRCQUNGLE1BQU16QyxLQUFLNEMsS0FBSyxDQUFDSDt3QkFDbkIsRUFBRSxPQUFPSSxHQUFHOzRCQUNWQyxRQUFRQyxLQUFLLENBQUMsNkJBQTZCRjt3QkFDN0M7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0YsU0FBVTtRQUNSbEIsT0FBT3FCLFdBQVc7SUFDcEI7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3RpbWh1bnRlci9yb24tYWkvc3JjL2xpYi9hcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQVBJIHNlcnZpY2UgZm9yIGNvbW11bmljYXRpbmcgd2l0aCBDbGF1ZGUgYWdlbnQgYmFja2VuZFxuY29uc3QgQVBJX0JBU0VfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnL2FwaSdcblxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSB7XG4gIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnXG4gIGNvbnRlbnQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRSZXF1ZXN0IHtcbiAgbWVzc2FnZXM6IENoYXRNZXNzYWdlW11cbiAgc3lzdGVtX3Byb21wdD86IHN0cmluZ1xuICB0ZW1wZXJhdHVyZT86IG51bWJlclxuICBtYXhfdG9rZW5zPzogbnVtYmVyXG4gIHRvb2xzPzogc3RyaW5nW11cbiAgZW5hYmxlX2NhY2hpbmc/OiBib29sZWFuXG4gIGNhY2hlX3R0bD86IHN0cmluZ1xuICBlbmFibGVfdGhpbmtpbmc/OiBib29sZWFuXG4gIHRoaW5raW5nX2J1ZGdldD86IG51bWJlclxuICBlbmFibGVfY2l0YXRpb25zPzogYm9vbGVhblxuICBzdHJlYW0/OiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdFJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICByZXNwb25zZToge1xuICAgIGNvbnRlbnQ6IEFycmF5PHtcbiAgICAgIHR5cGU6IHN0cmluZ1xuICAgICAgdGV4dD86IHN0cmluZ1xuICAgICAgdG9vbF91c2U/OiB7XG4gICAgICAgIGlkOiBzdHJpbmdcbiAgICAgICAgbmFtZTogc3RyaW5nXG4gICAgICAgIGlucHV0OiBhbnlcbiAgICAgIH1cbiAgICB9PlxuICAgIHVzYWdlPzoge1xuICAgICAgaW5wdXRfdG9rZW5zOiBudW1iZXJcbiAgICAgIG91dHB1dF90b2tlbnM6IG51bWJlclxuICAgICAgY2FjaGVfY3JlYXRpb25faW5wdXRfdG9rZW5zPzogbnVtYmVyXG4gICAgICBjYWNoZV9yZWFkX2lucHV0X3Rva2Vucz86IG51bWJlclxuICAgIH1cbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgQ2xhdWRlQVBJIHtcbiAgcHJpdmF0ZSBiYXNlVVJMOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihiYXNlVVJMOiBzdHJpbmcgPSBBUElfQkFTRV9VUkwpIHtcbiAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMXG4gIH1cblxuICBhc3luYyBjaGF0KHJlcXVlc3Q6IENoYXRSZXF1ZXN0KTogUHJvbWlzZTxDaGF0UmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVSTH0vY2hhdGAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICAgIH0pXG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfVxuXG4gIGFzeW5jIGNoYXRTdHJlYW0ocmVxdWVzdDogQ2hhdFJlcXVlc3QpOiBQcm9taXNlPFJlYWRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVUkx9L2NoYXRgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IC4uLnJlcXVlc3QsIHN0cmVhbTogdHJ1ZSB9KSxcbiAgICB9KVxuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YClcbiAgICB9XG5cbiAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVzcG9uc2UgYm9keScpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmJvZHlcbiAgfVxuXG4gIGFzeW5jIGhlYWx0aGNhcmVBbmFseXplKHRhc2s6IHN0cmluZywgY29udGV4dD86IGFueSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9oZWFsdGhjYXJlL2FuYWx5emVgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHRhc2ssIGNvbnRleHQgfSksXG4gICAgfSlcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9XG5cbiAgYXN5bmMgZGVlcFJlc2VhcmNoKG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdLCBzZXNzaW9uSWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVSTH0vYXBpL3J1bl9zc2VgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBuZXdNZXNzYWdlOiB7XG4gICAgICAgICAgcGFydHM6IG1lc3NhZ2VzLm1hcChtc2cgPT4gKHsgdGV4dDogbXNnLmNvbnRlbnQgfSkpLFxuICAgICAgICAgIHJvbGU6IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdLnJvbGVcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgfSlcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmJvZHlcbiAgfVxufVxuXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3QgY2xhdWRlQVBJID0gbmV3IENsYXVkZUFQSSgpXG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBwYXJzZSBTU0Ugc3RyZWFtXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIHBhcnNlU1NFU3RyZWFtKHN0cmVhbTogUmVhZGFibGVTdHJlYW08VWludDhBcnJheT4pIHtcbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpXG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuICBsZXQgYnVmZmVyID0gJydcblxuICB0cnkge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpXG4gICAgICBpZiAoZG9uZSkgYnJlYWtcblxuICAgICAgYnVmZmVyICs9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7IHN0cmVhbTogdHJ1ZSB9KVxuICAgICAgY29uc3QgbGluZXMgPSBidWZmZXIuc3BsaXQoJ1xcbicpXG4gICAgICBidWZmZXIgPSBsaW5lcy5wb3AoKSB8fCAnJ1xuXG4gICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aCgnZGF0YTogJykpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gbGluZS5zbGljZSg2KS50cmltKClcbiAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhICE9PSAnW0RPTkVdJykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgeWllbGQgSlNPTi5wYXJzZShkYXRhKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgU1NFIGRhdGE6JywgZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgcmVhZGVyLnJlbGVhc2VMb2NrKClcbiAgfVxufSAiXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJDbGF1ZGVBUEkiLCJjaGF0IiwicmVxdWVzdCIsInJlc3BvbnNlIiwiZmV0Y2giLCJiYXNlVVJMIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwiY2hhdFN0cmVhbSIsInN0cmVhbSIsImhlYWx0aGNhcmVBbmFseXplIiwidGFzayIsImNvbnRleHQiLCJkZWVwUmVzZWFyY2giLCJtZXNzYWdlcyIsInNlc3Npb25JZCIsInVzZXJJZCIsIm5ld01lc3NhZ2UiLCJwYXJ0cyIsIm1hcCIsIm1zZyIsInRleHQiLCJjb250ZW50Iiwicm9sZSIsImxlbmd0aCIsImNvbnN0cnVjdG9yIiwiY2xhdWRlQVBJIiwicGFyc2VTU0VTdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJidWZmZXIiLCJkb25lIiwidmFsdWUiLCJyZWFkIiwiZGVjb2RlIiwibGluZXMiLCJzcGxpdCIsInBvcCIsImxpbmUiLCJzdGFydHNXaXRoIiwiZGF0YSIsInNsaWNlIiwidHJpbSIsInBhcnNlIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsInJlbGVhc2VMb2NrIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});